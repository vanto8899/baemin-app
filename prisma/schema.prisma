// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  fullname  String
  username  String   @unique
  email     String   @unique
  phone     String   @unique
  address   String?
  password  String
  role      Role
  cart      Cart? // One-to-one relationship with Cart
  orders    Order[] // One-to-many relationship with Order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  CUSTOMER
  ADMIN
}

//////

model Category {
  id          Int          @id @default(autoincrement())
  name        String
  imageUrl    String?
  restaurants Restaurant[] // One-to-many relationship with restaurants
}

////

model Restaurant {
  id         Int      @id @default(autoincrement())
  name       String
  address    String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  dishes     Dish[] // One-to-many relationship with dishes
  orders     Order[] // One-to-many relationship with orders
}

//////

model Dish {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  imageUrl     String?
  stock        Int         @default(0) // Thêm số lượng tồn kho cho món ăn
  restaurantId Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  cartItems    CartItem[] // One-to-many relationship with CartItem
  orderItems   OrderItem[] // One-to-many relationship with OrderItem
}

//////

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique // Cần thêm @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[] // One-to-many relationship with CartItem
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

///

model CartItem {
  id       Int  @id @default(autoincrement())
  cartId   Int
  cart     Cart @relation(fields: [cartId], references: [id])
  dishId   Int
  dish     Dish @relation(fields: [dishId], references: [id])
  quantity Int
}

//////

model Order {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  restaurantId  Int
  restaurant    Restaurant    @relation(fields: [restaurantId], references: [id])
  totalPrice    Float
  status        OrderStatus   @default(PENDING)
  orderItems    OrderItem[]
  paymentMethod PaymentMethod
  note          String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  ONLINE
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

////////

model OrderItem {
  id       Int   @id @default(autoincrement())
  orderId  Int
  order    Order @relation(fields: [orderId], references: [id])
  dishId   Int
  dish     Dish  @relation(fields: [dishId], references: [id])
  quantity Int
  price    Float
}
